monthtmp = NA
daytmp   = NA
# cat("At row",i,"=",eltrcensus$plot[i]) this is to print the number of row and the value in that row
if (as.character(eltrcensus$plot[ii]) == plotname) {
yeartmp  = 2007
monthtmp = 07
daytmp   = 06
}
yearDAP2  = c(yearDAP2,yeartmp)
monthDAP2 = c(monthDAP2,monthtmp)
dayDAP2   = c(dayDAP2,daytmp)
datesDAP2 = data.frame(yearDAP2, monthDAP2, dayDAP2)
datesDAP2 = data.frame(datesDAP2[1,], eltrcensus$plot, row.names = NULL)
colnames(datesDAP2) <- c("year", "month", "day", "plot")
}
# 3rd census
yearDAP3   <- NULL   # same as yearDAP2 = c()
monthDAP3  <- NULL
dayDAP3    <- NULL
for (ii in 1:(length(eltrcensus$plot))) {  #length(eltrcensus$plot) is equivalent to nrow(eltrcensus)
yeartmp  = NA
monthtmp = NA
daytmp   = NA
# cat("At row",i,"=",eltrcensus$plot[i]) this is to print the number of row and the value in that row
if (as.character(eltrcensus$plot[ii]) == plotname) {
yeartmp  = 2011
monthtmp = 11
daytmp   = 24
}
yearDAP3  = c(yearDAP3,yeartmp)
monthDAP3 = c(monthDAP3,monthtmp)
dayDAP3   = c(dayDAP3,daytmp)
datesDAP3 = data.frame(yearDAP3, monthDAP3, dayDAP3)
datesDAP3 = data.frame(datesDAP3[1,], eltrcensus$plot, row.names = NULL)
colnames(datesDAP3) <- c("year", "month", "day", "plot")
}
eltrcensus$height <- eltrcensus$mean.H
eltrcensus$density <- eltrcensus$WD14
eltrcen1 <- data.frame(plot_code=eltrcensus$plot, tree_tag=eltrcensus$tag, dbh=eltrcensus$DBH.1, height_m=eltrcensus$height, density=eltrcensus$density, datesDAP1)
eltrcen2 <- data.frame(plot_code=eltrcensus$plot, tree_tag=eltrcensus$tag, dbh=eltrcensus$DBH.2, height_m=eltrcensus$height, density=eltrcensus$density, datesDAP2)
eltrcen3 <- data.frame(plot_code=eltrcensus$plot, tree_tag=eltrcensus$tag, dbh=eltrcensus$DBH.3, height_m=eltrcensus$height, density=eltrcensus$density, datesDAP3)
census <- rbind(eltrcen1, eltrcen2, eltrcen3)
census$height_m <- as.numeric(census$height_m)
census$plot <- NULL
str(census)
write.csv(census, file="test_SPD01_Mar1017.csv")
setwd("~/Github/GEMcarbon.R/a_readyforupload_db")
census   <- read.csv("test_SPD01_Mar1017.csv", sep=",", header=T)
plotname = "SPD-01"
census1_year = "2003"
census2_year = "2007"
allometric_option = "Default"
height_correction_option = "Default"
# load libraries
library(sqldf)
## Set of allometric equations after Chave et al. 2005 and Chave et al. 2014 are defined in allometricEquations.R. Options defined here:
if (allometric_option == 2 | allometric_option == "dry") {
allometrix <- 2
print("dry equation  is used for estimating AGB, model I.3 (see Chave et al., 2005)")
} else if (allometric_option == 3 | allometric_option == "moist" | allometric_option == "Default" | allometric_option == 1) {
allometrix <- 3
print("moist equation  is used for estimating AGB, model I.6 (see Chave et al., 2005)")
} else if (allometric_option == 4 | allometric_option == "wet") {
allometrix <- 4
print("wet equation  is used for estimating AGB, model I.3 (see Chave et al., 2005)")
} else if (allometric_option == 5 | allometric_option == "Chave2014") {
allometrix <- 5
print("pantropical equation is used for estimating AGB, model (4) (see Chave et al., 2014)")
} else {
print("Please specify a valid allometric_option!")
return()
}
## get data for all trees that are in the plot selected
cen <- subset(census, plot_code==plotname)
# Density: look up density at spp / genus level from global density db Zanne
## fill implausible values: this should go in data cleaning code!
cen$height_m[which(cen$height_m>120)] <- 120
cen$height_m[which(cen$height_m<2)]   <- 2
xdensity <- mean(cen$density, na.rm=T)
cen$density[which(is.na(cen$density)) | which(cen$density==0)] <- xdensity
## OPTIONS
## Height correction options
if (height_correction_option == 1 | height_correction_option == "Default" ) {
predheight <- 1
print("If you have height for more than 50 trees in your plot, estimate local diameter-height relationship. If not, choose height correction option 2.")
} else if (height_correction_option == 2) {
predheight <- 2
print("height correction estimated as described by Feldpauch et al. (2012). Please check Feldpauch regional parameters in the code. Default is Brazilian shield.")
} else {
print("Please specify a valid height_correction_option!")
return()
}
# dates option
if (census1_year == "Default" ) {
census1_year <- min(census$year)
print("Using first and last years of the dataset as census interval. Please precify census1_year and census2_year.")
}
if (census2_year == "Default" ) {
census2_year <- max(census$year)
print("Using first and last years of the dataset as census interval.")
}
## Correct for missing tree heights
# missing height function
h.est=function(dbh, h){
l      = lm(h~dbh) # Nikos Fyllas has a function with dbh and wood density: H=2.643913*((1.0/WD)^-0.319592)*(dbh^0.534951)
coeffs = coefficients(l)
pred.h = coeffs[1] + coeffs[2]*dbh
}
# Option 2: you have height for less than 50 trees in your plot. Use Fedpauch equation.
#ADD PARAMETER: Feldpauch region.
## Feldpauch correction procedure for heights, diameters and densitys:
# Brazilian shield
Bo    = 0.6373
B1    = 0.4647  # E.C. Amazonia
So1   = 0.012  # E.C. Amazonia
Abar  = 20.4  # mean cenetered basal area m-2 ha-1
n01   = 0.0034 # E.C. Amazonia
Pvbar = 0.68 # mean centered precipitation coefficient of variation
n02   = -0.0449 # E.C. Amazonia
Sdbar = 5     # mean centered dry season length no months less than 100mm
n03   = 0.0191  # E.C. Amazonia
Tabar = 25.0  # mean centered annual averge temperature
# Define height options
if (predheight == 1) {
w <- which(is.na(cen$height_m))
h.pred <- h.est(cen$dbh, cen$height_m)
cen$height_m[w] <- h.pred[w]
} else if (predheight == 2) {
w <- which(is.na(cen$height_m))
cen$height_m[w] <- 10^(Bo + B1*log10(cen$dbh[w]/10) + Abar*So1 + n01*Pvbar + n02*Sdbar + n03*Tabar)
}
er = 0.1 # .1cm sampling error is trivial compared to systematic error of allometric equation. Change this see Chave et al. 2005.
## loop through each tree to estimate biomass (bm) and convert to above ground carbon (agC)
for (ii in 1:length(cen$plot_code)) {    # this is just looping through each row.
dbh_tree <- cen$dbh[ii]
den_tree <- cen$density[ii]
h_tree   <- cen$height_m[ii]
# this uses allometric equations from allometric Equations.R
if (allometrix == 2) {
bm <- Chave2005_dry(diax=dbh_tree, density=den_tree, height=h_tree)
} else if (allometrix == 3) {
bm <- Chave2005_moist(diax=dbh_tree, density=den_tree, height=h_tree)
} else if (allometrix == 4) {
bm <- Chave2005_wet(diax=dbh_tree, density=den_tree, height=h_tree)
} else if (allometrix == 5) {
bm <- Chave2014(diax=dbh_tree, density=den_tree, height=h_tree)
}
# use this for debugging: print(bm) # print(ii)
cen$agC[ii] <- (bm)*(1/(2.1097*1000)) # convert kg to Mg=1/1000=10 and convert to carbon = 47.8%
}
## TO DO ## error treatment remains to be done!
## TO DO ## ADD TERHI's HEIGHT PROPAGATION CORRECTION
## find global start and end month:
cen$min_date <- NULL
cen$max_date <- NULL
cen$date     <- as.Date(paste(cen$year, cen$month, cen$day, sep="."), format="%Y.%m.%d")
# temp <- subset(cen, cen$year == census1_year & cen$year == census2_year) #
agC_mydates     <- subset(cen, cen$year == census1_year | cen$year == census2_year, select = c(plot_code, tree_tag, year, month, day, date, agC))
for (i in 1:length(agC_mydates$tree_tag)) {
min_date <- as.character(min(agC_mydates$date))
max_date <- as.character(max(agC_mydates$date))
}
start_date <- as.Date(format(min(strptime(min_date, format="%Y-%m-%d"))))
end_date   <- as.Date(format(max(strptime(max_date, format="%Y-%m-%d"))))
census_interval <- as.numeric(difftime(end_date, start_date, units="days"))
# (AG carbon.2 - AG carbon.1) / census_interval
agC_1         <- subset(cen, cen$year == census1_year, select = c(plot_code, tree_tag, dbh, year, month, day, agC))
agC_2         <- subset(cen, cen$year == census2_year, select = c(plot_code, tree_tag, dbh, year, month, day, agC))
#agC_1$uid     <- paste(agC_1$tree_tag, agC_1$year, agC_1$month, agC_1$day, sep=".")
#agC_2$uid     <- paste(agC_2$tree_tag, agC_2$year, agC_2$month, agC_2$day, sep=".")
npp           <- sqldf("SELECT agC_1.plot_code, agC_1.tree_tag, agC_2.dbh, agC_2.year, agC_2.month, agC_1.agC , agC_2.agC FROM agC_1 JOIN agC_2 ON agC_1.tree_tag = agC_2.tree_tag")
colnames(npp) <- c("plot_code", "tree_tag", "dbh", "year", "month", "agC.1", "agC.2")
npp$npp_day       <- (npp$agC.2-npp$agC.1) / census_interval
npp$NPPpertree_MgC_ha_yr <- npp$npp_day*365
Chave2005_dry <- function(diax, density, height) {
AGB_est <- 0.112*(density*((diax)^2)*height)^0.916
return(AGB_est)
}
# p. 90, Chave et al, 2005: model I.6 moist:
Chave2005_moist <- function(diax, density, height) {
AGB_est <- 0.0509*density*((diax)^2)*height
return(AGB_est)
}
# p. 95, Chave et al, 2005: model I.6 wet:
Chave2005_wet <- function(diax, density, height) {
AGB_est <- 0.0776*(density*((diax)^2)*height)^0.940
return(AGB_est)
}
# Chave et al, 2014:
Chave2014 <- function(diax, density, height) {
AGB_est <- 0.0673*(density*((diax)^2)*height)^0.976
return(AGB_est)
}
## loop through each tree to estimate biomass (bm) and convert to above ground carbon (agC)
for (ii in 1:length(cen$plot_code)) {    # this is just looping through each row.
dbh_tree <- cen$dbh[ii]
den_tree <- cen$density[ii]
h_tree   <- cen$height_m[ii]
# this uses allometric equations from allometric Equations.R
if (allometrix == 2) {
bm <- Chave2005_dry(diax=dbh_tree, density=den_tree, height=h_tree)
} else if (allometrix == 3) {
bm <- Chave2005_moist(diax=dbh_tree, density=den_tree, height=h_tree)
} else if (allometrix == 4) {
bm <- Chave2005_wet(diax=dbh_tree, density=den_tree, height=h_tree)
} else if (allometrix == 5) {
bm <- Chave2014(diax=dbh_tree, density=den_tree, height=h_tree)
}
# use this for debugging: print(bm) # print(ii)
cen$agC[ii] <- (bm)*(1/(2.1097*1000)) # convert kg to Mg=1/1000=10 and convert to carbon = 47.8%
}
## TO DO ## error treatment remains to be done!
## TO DO ## ADD TERHI's HEIGHT PROPAGATION CORRECTION
## find global start and end month:
cen$min_date <- NULL
cen$max_date <- NULL
cen$date     <- as.Date(paste(cen$year, cen$month, cen$day, sep="."), format="%Y.%m.%d")
# temp <- subset(cen, cen$year == census1_year & cen$year == census2_year) #
agC_mydates     <- subset(cen, cen$year == census1_year | cen$year == census2_year, select = c(plot_code, tree_tag, year, month, day, date, agC))
for (i in 1:length(agC_mydates$tree_tag)) {
min_date <- as.character(min(agC_mydates$date))
max_date <- as.character(max(agC_mydates$date))
}
start_date <- as.Date(format(min(strptime(min_date, format="%Y-%m-%d"))))
end_date   <- as.Date(format(max(strptime(max_date, format="%Y-%m-%d"))))
census_interval <- as.numeric(difftime(end_date, start_date, units="days"))
# (AG carbon.2 - AG carbon.1) / census_interval
agC_1         <- subset(cen, cen$year == census1_year, select = c(plot_code, tree_tag, dbh, year, month, day, agC))
agC_2         <- subset(cen, cen$year == census2_year, select = c(plot_code, tree_tag, dbh, year, month, day, agC))
#agC_1$uid     <- paste(agC_1$tree_tag, agC_1$year, agC_1$month, agC_1$day, sep=".")
#agC_2$uid     <- paste(agC_2$tree_tag, agC_2$year, agC_2$month, agC_2$day, sep=".")
npp           <- sqldf("SELECT agC_1.plot_code, agC_1.tree_tag, agC_2.dbh, agC_2.year, agC_2.month, agC_1.agC , agC_2.agC FROM agC_1 JOIN agC_2 ON agC_1.tree_tag = agC_2.tree_tag")
colnames(npp) <- c("plot_code", "tree_tag", "dbh", "year", "month", "agC.1", "agC.2")
npp$npp_day       <- (npp$agC.2-npp$agC.1) / census_interval
npp$NPPpertree_MgC_ha_yr <- npp$npp_day*365
xx <- (sum(npp$NPPpertree_MgC_ha_yr, na.rm=T))
xx
require(ggplot2)
require(sqldf)
require(lubridate)
#plot_code;tree_tag;date; all dbh; NPP per tree for each time interval.
setwd("~/Github/GEMcarbon.R/a_readyforupload_db")
census <- read.table("andesplots_WFR_nov2014_noroots.csv", header=TRUE, sep=",", na.strings=c("NA", "NaN", ""), dec=".", strip.white=TRUE)
wd_chave      <- read.table("wsg.csv", header=TRUE, sep=",", na.strings=c("NA", "NaN", ""), dec=".", strip.white=TRUE)
census$WD14 <- census$WD.14
census = as.data.frame(sapply(census, toupper)) # convert all characters to capitals
wd_farfan <- sqldf("SELECT family, genus, specie, AVG(WD14) FROM census GROUP BY family, genus") #, specie
colnames(wd_farfan) <- c("family", "genus", "species", "wdensity")
plotname = "SPD-01"
# choose a plot
data <- subset(census, plot==plotname)
# define start and end date:
date_1 <- as.character("2006/08/30") # These dates are in William's original file andesplots_WFR_nov2014.xlx
date_2 <- as.character("2008/09/07")
date_3 <- as.character("NA")
date_1 <- as.Date(format(strptime(date_1, format="%Y/%m/%d")))
date_2 <- as.Date(format(strptime(date_2, format="%Y/%m/%d")))
date_3 <- as.Date(format(strptime(date_3, format="%Y/%m/%d")))
census_interval_1 <- as.numeric(difftime(date_2, date_1, units="days"))
census_interval_yrs_1 <- census_interval_1/365
census_interval_2 <- as.numeric(difftime(date_3, date_2, units="days"))
census_interval_yrs_2 <- census_interval_2/365
data[,c("DBH.1", "DBH.2", "DBH.3", "DBH.4", "DBH.5", "WD14")] <- as.numeric(as.character(unlist(data[,c("DBH.1", "DBH.2", "DBH.3", "DBH.4", "DBH.5", "WD14")])))
str(data)
data$dbh_growth_yr <-  (data$DBH.2 - data$DBH.1) / census_interval_yrs_1
gr_sd <- sd(data$dbh_growth_yr, na.rm=T)
plot1 <- ggplot(data=data, aes(x=DBH.1, y=dbh_growth_yr, na.rm=T)) +
geom_point() +
ylim(-10, 10) +
ggtitle(data$plot)
plot1
w = which(is.na(data$DBH.1) & !is.na(data$DBH.2))
data$DBH.2[w] = 0/0
data$recruits <- "ok"
data$recruits[w] <- "recruit"
w = which(is.na(data$DBH.1) & is.na(data$DBH.2) & !is.na(data$DBH.3))
data$DBH.3[w] = 0/0
data$recruits[w] <- "recruit"
# Do not allow for shrinking trees. We allow shrinkage of 10%.
w = which(data$DBH.1 > data$DBH.2 + (data$DBH.1*0.1))
data$DBH.2[w] = data$DBH.1[w]
data$srink <- "ok"
data$srink[w] <- "shrunk.dbh.2"
w = which(data$DBH.2 > data$DBH.3 + (data$DBH.2*0.1))
data$DBH.3[w] = data$DBH.2[w]
data$srink[w] <- "shrunk.dbh.3"
# replace missing values in the middle of the census
w = which(!is.na(data$DBH.1) & is.na(data$DBH.2) & !is.na(data$DBH.3))
data$DBH.2[w] = (data$DBH.1[w] + data$DBH.3[w])/2        # mean rather than meadian flag this as 8 - see RAINFOR flags.
data$missing <- "ok"
data$missing[w] <- "missing"
# Define the maximum interval you would like to allow per year (e.g. 5 cm), or use the default 3SD.
maxincrement_1 <- 5 * census_interval_yrs_1 #(3*gr_sd)
maxincrement_2 <- 5 * census_interval_yrs_2 #(3*gr_sd)
w = which((data$DBH.2 - data$DBH.1) >= maxincrement_1)
data$overgrown <- "ok"
data$overgrown[w] <- ">2cm growth per yr dbh.2"
data$value_replaced <- NA
data$value_replaced[w] <- data$DBH.2[w]
data$DBH.2[w] = (data$DBH.1[w] + maxincrement_1)
w = which((data$DBH.3 - data$DBH.2) >= maxincrement_2)
data$overgrown[w] <- ">2cm growth per yr dbh.3"
data$value_replaced[w] <- data$DBH.3[w]
data$DBH.3[w] = (data$DBH.2[w] + maxincrement_2)
# Flag duplicate trees
n_occur <- data.frame(table(data$tag))
n_occur[n_occur$Freq > 1,]
data[data$tag %in% n_occur$Var1[n_occur$Freq > 1],]
# Standardise NAs
data[is.na(data)] <- NA
eltrcensus <- data
# Add dates to eltrcensus.
# 1st census
yearDAP1   <- c()
monthDAP1  <- c()
dayDAP1    <- c()
for (ii in 1:(length(eltrcensus$plot))) {  # length(eltrcensus$plot) is equivalent to nrow(eltrcensus)
yeartmp  = NA
monthtmp = NA
daytmp   = NA
# cat("At row",i,"=",eltrcensus$plot[i]) # this is to print the number of row and the value in that row
if (as.character(eltrcensus$plot[ii]) == plotname) {
yeartmp  = 2006
monthtmp = 08
daytmp   = 30
}
yearDAP1  = c(yearDAP1,yeartmp)
monthDAP1 = c(monthDAP1,monthtmp)
dayDAP1   = c(dayDAP1,daytmp)
datesDAP1 = data.frame(yearDAP1, monthDAP1, dayDAP1)
datesDAP1 = data.frame(datesDAP1[1,], eltrcensus$plot, row.names = NULL) # Make sure this is the right number of rows.
colnames(datesDAP1) <- c("year", "month", "day", "plot")
}
# 2nd census
yearDAP2   <- NULL   # same as yearDAP2 = c()
monthDAP2  <- NULL
dayDAP2    <- NULL
for (ii in 1:(length(eltrcensus$plot))) {  #length(eltrcensus$plot) is equivalent to nrow(eltrcensus)
yeartmp  = NA
monthtmp = NA
daytmp   = NA
# cat("At row",i,"=",eltrcensus$plot[i]) this is to print the number of row and the value in that row
if (as.character(eltrcensus$plot[ii]) == plotname) {
yeartmp  = 2008
monthtmp = 09
daytmp   = 07
}
yearDAP2  = c(yearDAP2,yeartmp)
monthDAP2 = c(monthDAP2,monthtmp)
dayDAP2   = c(dayDAP2,daytmp)
datesDAP2 = data.frame(yearDAP2, monthDAP2, dayDAP2)
datesDAP2 = data.frame(datesDAP2[1,], eltrcensus$plot, row.names = NULL)
colnames(datesDAP2) <- c("year", "month", "day", "plot")
}
eltrcensus$height <- eltrcensus$mean.H
eltrcensus$density <- eltrcensus$WD14
eltrcen1 <- data.frame(plot_code=eltrcensus$plot, tree_tag=eltrcensus$tag, dbh=eltrcensus$DBH.1, height_m=eltrcensus$height, density=eltrcensus$density, datesDAP1)
eltrcen2 <- data.frame(plot_code=eltrcensus$plot, tree_tag=eltrcensus$tag, dbh=eltrcensus$DBH.2, height_m=eltrcensus$height, density=eltrcensus$density, datesDAP2)
census <- rbind(eltrcen1, eltrcen2) #, eltrcen3
census$height_m <- as.numeric(census$height_m)
census$plot <- NULL
str(census)
write.csv(census, file="test_SPD01_Mar1017.csv")
setwd("~/Github/GEMcarbon.R/a_readyforupload_db")
census   <- read.csv("test_SPD01_Mar1017.csv", sep=",", header=T)
plotname = "SPD-01"
census1_year = "2006"
census2_year = "2008"
allometric_option = "Default"
height_correction_option = "Default"
library(sqldf)
## Set of allometric equations after Chave et al. 2005 and Chave et al. 2014 are defined in allometricEquations.R. Options defined here:
if (allometric_option == 2 | allometric_option == "dry") {
allometrix <- 2
print("dry equation  is used for estimating AGB, model I.3 (see Chave et al., 2005)")
} else if (allometric_option == 3 | allometric_option == "moist" | allometric_option == "Default" | allometric_option == 1) {
allometrix <- 3
print("moist equation  is used for estimating AGB, model I.6 (see Chave et al., 2005)")
} else if (allometric_option == 4 | allometric_option == "wet") {
allometrix <- 4
print("wet equation  is used for estimating AGB, model I.3 (see Chave et al., 2005)")
} else if (allometric_option == 5 | allometric_option == "Chave2014") {
allometrix <- 5
print("pantropical equation is used for estimating AGB, model (4) (see Chave et al., 2014)")
} else {
print("Please specify a valid allometric_option!")
return()
}
## get data for all trees that are in the plot selected
cen <- subset(census, plot_code==plotname)
# Density: look up density at spp / genus level from global density db Zanne
## fill implausible values: this should go in data cleaning code!
cen$height_m[which(cen$height_m>120)] <- 120
cen$height_m[which(cen$height_m<2)]   <- 2
xdensity <- mean(cen$density, na.rm=T)
cen$density[which(is.na(cen$density)) | which(cen$density==0)] <- xdensity
## OPTIONS
## Height correction options
if (height_correction_option == 1 | height_correction_option == "Default" ) {
predheight <- 1
print("If you have height for more than 50 trees in your plot, estimate local diameter-height relationship. If not, choose height correction option 2.")
} else if (height_correction_option == 2) {
predheight <- 2
print("height correction estimated as described by Feldpauch et al. (2012). Please check Feldpauch regional parameters in the code. Default is Brazilian shield.")
} else {
print("Please specify a valid height_correction_option!")
return()
}
# dates option
if (census1_year == "Default" ) {
census1_year <- min(census$year)
print("Using first and last years of the dataset as census interval. Please precify census1_year and census2_year.")
}
if (census2_year == "Default" ) {
census2_year <- max(census$year)
print("Using first and last years of the dataset as census interval.")
}
## Correct for missing tree heights
# missing height function
h.est=function(dbh, h){
l      = lm(h~dbh) # Nikos Fyllas has a function with dbh and wood density: H=2.643913*((1.0/WD)^-0.319592)*(dbh^0.534951)
coeffs = coefficients(l)
pred.h = coeffs[1] + coeffs[2]*dbh
}
# Option 2: you have height for less than 50 trees in your plot. Use Fedpauch equation.
#ADD PARAMETER: Feldpauch region.
## Feldpauch correction procedure for heights, diameters and densitys:
# Brazilian shield
Bo    = 0.6373
B1    = 0.4647  # E.C. Amazonia
So1   = 0.012  # E.C. Amazonia
Abar  = 20.4  # mean cenetered basal area m-2 ha-1
n01   = 0.0034 # E.C. Amazonia
Pvbar = 0.68 # mean centered precipitation coefficient of variation
n02   = -0.0449 # E.C. Amazonia
Sdbar = 5     # mean centered dry season length no months less than 100mm
n03   = 0.0191  # E.C. Amazonia
Tabar = 25.0  # mean centered annual averge temperature
# Define height options
if (predheight == 1) {
w <- which(is.na(cen$height_m))
h.pred <- h.est(cen$dbh, cen$height_m)
cen$height_m[w] <- h.pred[w]
} else if (predheight == 2) {
w <- which(is.na(cen$height_m))
cen$height_m[w] <- 10^(Bo + B1*log10(cen$dbh[w]/10) + Abar*So1 + n01*Pvbar + n02*Sdbar + n03*Tabar)
}
er = 0.1 # .1cm sampling error is trivial compared to systematic error of allometric equation. Change this see Chave et al. 2005.
## loop through each tree to estimate biomass (bm) and convert to above ground carbon (agC)
for (ii in 1:length(cen$plot_code)) {    # this is just looping through each row.
dbh_tree <- cen$dbh[ii]
den_tree <- cen$density[ii]
h_tree   <- cen$height_m[ii]
# this uses allometric equations from allometric Equations.R
if (allometrix == 2) {
bm <- Chave2005_dry(diax=dbh_tree, density=den_tree, height=h_tree)
} else if (allometrix == 3) {
bm <- Chave2005_moist(diax=dbh_tree, density=den_tree, height=h_tree)
} else if (allometrix == 4) {
bm <- Chave2005_wet(diax=dbh_tree, density=den_tree, height=h_tree)
} else if (allometrix == 5) {
bm <- Chave2014(diax=dbh_tree, density=den_tree, height=h_tree)
}
# use this for debugging: print(bm) # print(ii)
cen$agC[ii] <- (bm)*(1/(2.1097*1000)) # convert kg to Mg=1/1000=10 and convert to carbon = 47.8%
}
# p. 90, Chave et al, 2005: model I.6 moist:
Chave2005_moist <- function(diax, density, height) {
AGB_est <- 0.0509*density*((diax)^2)*height
return(AGB_est)
}
## loop through each tree to estimate biomass (bm) and convert to above ground carbon (agC)
for (ii in 1:length(cen$plot_code)) {    # this is just looping through each row.
dbh_tree <- cen$dbh[ii]
den_tree <- cen$density[ii]
h_tree   <- cen$height_m[ii]
# this uses allometric equations from allometric Equations.R
if (allometrix == 2) {
bm <- Chave2005_dry(diax=dbh_tree, density=den_tree, height=h_tree)
} else if (allometrix == 3) {
bm <- Chave2005_moist(diax=dbh_tree, density=den_tree, height=h_tree)
} else if (allometrix == 4) {
bm <- Chave2005_wet(diax=dbh_tree, density=den_tree, height=h_tree)
} else if (allometrix == 5) {
bm <- Chave2014(diax=dbh_tree, density=den_tree, height=h_tree)
}
# use this for debugging: print(bm) # print(ii)
cen$agC[ii] <- (bm)*(1/(2.1097*1000)) # convert kg to Mg=1/1000=10 and convert to carbon = 47.8%
}
cen$min_date <- NULL
cen$max_date <- NULL
cen$date     <- as.Date(paste(cen$year, cen$month, cen$day, sep="."), format="%Y.%m.%d")
# temp <- subset(cen, cen$year == census1_year & cen$year == census2_year) #
agC_mydates     <- subset(cen, cen$year == census1_year | cen$year == census2_year, select = c(plot_code, tree_tag, year, month, day, date, agC))
for (i in 1:length(agC_mydates$tree_tag)) {
min_date <- as.character(min(agC_mydates$date))
max_date <- as.character(max(agC_mydates$date))
}
start_date <- as.Date(format(min(strptime(min_date, format="%Y-%m-%d"))))
end_date   <- as.Date(format(max(strptime(max_date, format="%Y-%m-%d"))))
census_interval <- as.numeric(difftime(end_date, start_date, units="days"))
# (AG carbon.2 - AG carbon.1) / census_interval
agC_1         <- subset(cen, cen$year == census1_year, select = c(plot_code, tree_tag, dbh, year, month, day, agC))
agC_2         <- subset(cen, cen$year == census2_year, select = c(plot_code, tree_tag, dbh, year, month, day, agC))
#agC_1$uid     <- paste(agC_1$tree_tag, agC_1$year, agC_1$month, agC_1$day, sep=".")
#agC_2$uid     <- paste(agC_2$tree_tag, agC_2$year, agC_2$month, agC_2$day, sep=".")
npp           <- sqldf("SELECT agC_1.plot_code, agC_1.tree_tag, agC_2.dbh, agC_2.year, agC_2.month, agC_1.agC , agC_2.agC FROM agC_1 JOIN agC_2 ON agC_1.tree_tag = agC_2.tree_tag")
colnames(npp) <- c("plot_code", "tree_tag", "dbh", "year", "month", "agC.1", "agC.2")
npp$npp_day       <- (npp$agC.2-npp$agC.1) / census_interval
npp$NPPpertree_MgC_ha_yr <- npp$npp_day*365
xx <- (sum(npp$NPPpertree_MgC_ha_yr, na.rm=T))
xx
